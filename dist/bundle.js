(()=>{"use strict";var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])},n(e,t)};function e(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}function t(n,e){var t,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(a){return function(c){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(u=0)),u;)try{if(t=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,r=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){u.label=c[1];break}if(6===c[0]&&u.label<o[1]){u.label=o[1],o=c;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(c);break}o[2]&&u.ops.pop(),u.trys.pop();continue}c=e.call(n,u)}catch(n){c=[6,n],r=0}finally{t=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,a])}}}function r(n){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&n[e],r=0;if(t)return t.call(n);if(n&&"number"==typeof n.length)return{next:function(){return n&&r>=n.length&&(n=void 0),{value:n&&n[r++],done:!n}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(n,e){var t="function"==typeof Symbol&&n[Symbol.iterator];if(!t)return n;var r,o,i=t.call(n),u=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(n){o={error:n}}finally{try{r&&!r.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u}function i(n,e,t){if(t||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return n.concat(r||Array.prototype.slice.call(e))}function u(n){return this instanceof u?(this.v=n,this):new u(n)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c=function(n){return n&&"number"==typeof n.length&&"function"!=typeof n};function a(n){return"function"==typeof n}function l(n){return a(null==n?void 0:n.then)}var s,f=((s=function(n){var e;e=this,Error.call(e),e.stack=(new Error).stack,this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(n,e){return e+1+") "+n.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}).prototype=Object.create(Error.prototype),s.prototype.constructor=s,s);function d(n,e){if(n){var t=n.indexOf(e);0<=t&&n.splice(t,1)}}var p=function(){function n(n){this.initialTeardown=n,this.closed=!1,this._parentage=null,this._finalizers=null}return n.prototype.unsubscribe=function(){var n,e,t,u,c;if(!this.closed){this.closed=!0;var l=this._parentage;if(l)if(this._parentage=null,Array.isArray(l))try{for(var s=r(l),d=s.next();!d.done;d=s.next())d.value.remove(this)}catch(e){n={error:e}}finally{try{d&&!d.done&&(e=s.return)&&e.call(s)}finally{if(n)throw n.error}}else l.remove(this);var p=this.initialTeardown;if(a(p))try{p()}catch(n){c=n instanceof f?n.errors:[n]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var b=r(h),y=b.next();!y.done;y=b.next()){var m=y.value;try{v(m)}catch(n){c=null!=c?c:[],n instanceof f?c=i(i([],o(c)),o(n.errors)):c.push(n)}}}catch(n){t={error:n}}finally{try{y&&!y.done&&(u=b.return)&&u.call(b)}finally{if(t)throw t.error}}}if(c)throw new f(c)}},n.prototype.add=function(e){var t;if(e&&e!==this)if(this.closed)v(e);else{if(e instanceof n){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(t=this._finalizers)&&void 0!==t?t:[]).push(e)}},n.prototype._hasParent=function(n){var e=this._parentage;return e===n||Array.isArray(e)&&e.includes(n)},n.prototype._addParent=function(n){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(n),e):e?[e,n]:n},n.prototype._removeParent=function(n){var e=this._parentage;e===n?this._parentage=null:Array.isArray(e)&&d(e,n)},n.prototype.remove=function(e){var t=this._finalizers;t&&d(t,e),e instanceof n&&e._removeParent(this)},n.EMPTY=((e=new n).closed=!0,e),n;var e}();function h(n){return n instanceof p||n&&"closed"in n&&a(n.remove)&&a(n.add)&&a(n.unsubscribe)}function v(n){a(n)?n():n.unsubscribe()}p.EMPTY;var b={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},y={setTimeout:function(n,e){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var u=y.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,i([n,e],o(t))):setTimeout.apply(void 0,i([n,e],o(t)))},clearTimeout:function(n){var e=y.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(n)},delegate:void 0};function m(n){y.setTimeout((function(){var e=b.onUnhandledError;if(!e)throw n;e(n)}))}function w(){}var g=x("C",void 0,void 0);function x(n,e,t){return{kind:n,value:e,error:t}}var E=null,j=function(n){function t(e){var t=n.call(this)||this;return t.isStopped=!1,e?(t.destination=e,h(e)&&e.add(t)):t.destination=L,t}return e(t,n),t.create=function(n,e,t){return new T(n,e,t)},t.prototype.next=function(n){this.isStopped?P(function(n){return x("N",n,void 0)}(n),this):this._next(n)},t.prototype.error=function(n){this.isStopped?P(x("E",void 0,n),this):(this.isStopped=!0,this._error(n))},t.prototype.complete=function(){this.isStopped?P(g,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,n.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(n){this.destination.next(n)},t.prototype._error=function(n){try{this.destination.error(n)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(p),k=Function.prototype.bind;function S(n,e){return k.call(n,e)}var _=function(){function n(n){this.partialObserver=n}return n.prototype.next=function(n){var e=this.partialObserver;if(e.next)try{e.next(n)}catch(n){I(n)}},n.prototype.error=function(n){var e=this.partialObserver;if(e.error)try{e.error(n)}catch(n){I(n)}else I(n)},n.prototype.complete=function(){var n=this.partialObserver;if(n.complete)try{n.complete()}catch(n){I(n)}},n}(),T=function(n){function t(e,t,r){var o,i,u=n.call(this)||this;return a(e)||!e?o={next:null!=e?e:void 0,error:null!=t?t:void 0,complete:null!=r?r:void 0}:u&&b.useDeprecatedNextContext?((i=Object.create(e)).unsubscribe=function(){return u.unsubscribe()},o={next:e.next&&S(e.next,i),error:e.error&&S(e.error,i),complete:e.complete&&S(e.complete,i)}):o=e,u.destination=new _(o),u}return e(t,n),t}(j);function I(n){var e;b.useDeprecatedSynchronousErrorHandling?(e=n,b.useDeprecatedSynchronousErrorHandling&&E&&(E.errorThrown=!0,E.error=e)):m(n)}function P(n,e){var t=b.onStoppedNotification;t&&y.setTimeout((function(){return t(n,e)}))}var L={closed:!0,next:w,error:function(n){throw n},complete:w},A="function"==typeof Symbol&&Symbol.observable||"@@observable";function C(n){return n}var O=function(){function n(n){n&&(this._subscribe=n)}return n.prototype.lift=function(e){var t=new n;return t.source=this,t.operator=e,t},n.prototype.subscribe=function(n,e,t){var r,o=this,i=(r=n)&&r instanceof j||function(n){return n&&a(n.next)&&a(n.error)&&a(n.complete)}(r)&&h(r)?n:new T(n,e,t);return function(n){if(b.useDeprecatedSynchronousErrorHandling){var e=!E;if(e&&(E={errorThrown:!1,error:null}),n(),e){var t=E,r=t.errorThrown,o=t.error;if(E=null,r)throw o}}else n()}((function(){var n=o,e=n.operator,t=n.source;i.add(e?e.call(i,t):t?o._subscribe(i):o._trySubscribe(i))})),i},n.prototype._trySubscribe=function(n){try{return this._subscribe(n)}catch(e){n.error(e)}},n.prototype.forEach=function(n,e){var t=this;return new(e=N(e))((function(e,r){var o=new T({next:function(e){try{n(e)}catch(n){r(n),o.unsubscribe()}},error:r,complete:e});t.subscribe(o)}))},n.prototype._subscribe=function(n){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(n)},n.prototype[A]=function(){return this},n.prototype.pipe=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return(0===(t=n).length?C:1===t.length?t[0]:function(n){return t.reduce((function(n,e){return e(n)}),n)})(this);var t},n.prototype.toPromise=function(n){var e=this;return new(n=N(n))((function(n,t){var r;e.subscribe((function(n){return r=n}),(function(n){return t(n)}),(function(){return n(r)}))}))},n.create=function(e){return new n(e)},n}();function N(n){var e;return null!==(e=null!=n?n:b.Promise)&&void 0!==e?e:Promise}function U(n){return a(n[A])}function z(n){return Symbol.asyncIterator&&a(null==n?void 0:n[Symbol.asyncIterator])}function M(n){return new TypeError("You provided "+(null!==n&&"object"==typeof n?"an invalid object":"'"+n+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var H="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function K(n){return a(null==n?void 0:n[H])}function R(n){return function(n,e,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=t.apply(n,e||[]),i=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(n){o[n]&&(r[n]=function(e){return new Promise((function(t,r){i.push([n,e,t,r])>1||a(n,e)}))})}function a(n,e){try{(t=o[n](e)).value instanceof u?Promise.resolve(t.value.v).then(l,s):f(i[0][2],t)}catch(n){f(i[0][3],n)}var t}function l(n){a("next",n)}function s(n){a("throw",n)}function f(n,e){n(e),i.shift(),i.length&&a(i[0][0],i[0][1])}}(this,arguments,(function(){var e,r,o;return t(this,(function(t){switch(t.label){case 0:e=n.getReader(),t.label=1;case 1:t.trys.push([1,,9,10]),t.label=2;case 2:return[4,u(e.read())];case 3:return r=t.sent(),o=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,t.sent()];case 5:return[4,u(o)];case 6:return[4,t.sent()];case 7:return t.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function D(n){return a(null==n?void 0:n.getReader)}function q(n){if(n instanceof O)return n;if(null!=n){if(U(n))return i=n,new O((function(n){var e=i[A]();if(a(e.subscribe))return e.subscribe(n);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(n))return o=n,new O((function(n){for(var e=0;e<o.length&&!n.closed;e++)n.next(o[e]);n.complete()}));if(l(n))return t=n,new O((function(n){t.then((function(e){n.closed||(n.next(e),n.complete())}),(function(e){return n.error(e)})).then(null,m)}));if(z(n))return G(n);if(K(n))return e=n,new O((function(n){var t,o;try{for(var i=r(e),u=i.next();!u.done;u=i.next()){var c=u.value;if(n.next(c),n.closed)return}}catch(n){t={error:n}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(t)throw t.error}}n.complete()}));if(D(n))return G(R(n))}var e,t,o,i;throw M(n)}function G(n){return new O((function(e){(function(n,e){var o,i,u,c,a,l,s,f;return a=this,l=void 0,f=function(){var a,l;return t(this,(function(t){switch(t.label){case 0:t.trys.push([0,5,6,11]),o=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,t=n[Symbol.asyncIterator];return t?t.call(n):(n=r(n),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(t){e[t]=n[t]&&function(e){return new Promise((function(r,o){!function(n,e,t,r){Promise.resolve(r).then((function(e){n({value:e,done:t})}),e)}(r,o,(e=n[t](e)).done,e.value)}))}}}(n),t.label=1;case 1:return[4,o.next()];case 2:if((i=t.sent()).done)return[3,4];if(a=i.value,e.next(a),e.closed)return[2];t.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=t.sent(),u={error:l},[3,11];case 6:return t.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:t.sent(),t.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((s=void 0)||(s=Promise))((function(n,e){function t(n){try{o(f.next(n))}catch(n){e(n)}}function r(n){try{o(f.throw(n))}catch(n){e(n)}}function o(e){var o;e.done?n(e.value):(o=e.value,o instanceof s?o:new s((function(n){n(o)}))).then(t,r)}o((f=f.apply(a,l||[])).next())}))})(n,e).catch((function(n){return e.error(n)}))}))}function F(n){return function(e){if(function(n){return a(null==n?void 0:n.lift)}(e))return e.lift((function(e){try{return n(e,this)}catch(n){this.error(n)}}));throw new TypeError("Unable to lift unknown Observable type")}}function Y(n,e,t,r,o){return new Z(n,e,t,r,o)}var Z=function(n){function t(e,t,r,o,i,u){var c=n.call(this,e)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=t?function(n){try{t(n)}catch(n){e.error(n)}}:n.prototype._next,c._error=o?function(n){try{o(n)}catch(n){e.error(n)}finally{this.unsubscribe()}}:n.prototype._error,c._complete=r?function(){try{r()}catch(n){e.error(n)}finally{this.unsubscribe()}}:n.prototype._complete,c}return e(t,n),t.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var t=this.closed;n.prototype.unsubscribe.call(this),!t&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},t}(j);function B(n,e){return F((function(t,r){var o=0;t.subscribe(Y(r,(function(t){r.next(n.call(e,t,o++))})))}))}function J(n,e,t,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=e.schedule((function(){t(),o?n.add(this.schedule(null,r)):this.unsubscribe()}),r);if(n.add(i),!o)return i}function W(n,e,t){return void 0===t&&(t=1/0),a(e)?W((function(t,r){return B((function(n,o){return e(t,n,r,o)}))(q(n(t,r)))}),t):("number"==typeof e&&(t=e),F((function(e,r){return function(n,e,t,r,o,i,u,c){var a=[],l=0,s=0,f=!1,d=function(){!f||a.length||l||e.complete()},p=function(n){return l<r?h(n):a.push(n)},h=function(n){l++;var o=!1;q(t(n,s++)).subscribe(Y(e,(function(n){e.next(n)}),(function(){o=!0}),void 0,(function(){if(o)try{l--;for(;a.length&&l<r;)n=void 0,n=a.shift(),h(n);d()}catch(n){e.error(n)}var n})))};return n.subscribe(Y(e,p,(function(){f=!0,d()}))),function(){}}(e,r,n,t)})))}var Q=Array.isArray;var V=["addListener","removeListener"],X=["addEventListener","removeEventListener"],$=["on","off"];function nn(n,e,t,r){if(a(t)&&(r=t,t=void 0),r)return nn(n,e,t).pipe((u=r,B((function(n){return function(n,e){return Q(e)?n.apply(void 0,i([],o(e))):n(e)}(u,n)}))));var u,l=o(function(n){return a(n.addEventListener)&&a(n.removeEventListener)}(n)?X.map((function(r){return function(o){return n[r](e,o,t)}})):function(n){return a(n.addListener)&&a(n.removeListener)}(n)?V.map(en(n,e)):function(n){return a(n.on)&&a(n.off)}(n)?$.map(en(n,e)):[],2),s=l[0],f=l[1];if(!s&&c(n))return W((function(n){return nn(n,e,t)}))(q(n));if(!s)throw new TypeError("Invalid event target");return new O((function(n){var e=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.next(1<e.length?e:e[0])};return s(e),function(){return f(e)}}))}function en(n,e){return function(t){return function(r){return n[t](e,r)}}}var tn=function(n){function t(e,t){return n.call(this)||this}return e(t,n),t.prototype.schedule=function(n,e){return void 0===e&&(e=0),this},t}(p),rn={setInterval:function(n,e){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var u=rn.delegate;return(null==u?void 0:u.setInterval)?u.setInterval.apply(u,i([n,e],o(t))):setInterval.apply(void 0,i([n,e],o(t)))},clearInterval:function(n){var e=rn.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(n)},delegate:void 0},on=function(n){function t(e,t){var r=n.call(this,e,t)||this;return r.scheduler=e,r.work=t,r.pending=!1,r}return e(t,n),t.prototype.schedule=function(n,e){var t;if(void 0===e&&(e=0),this.closed)return this;this.state=n;var r=this.id,o=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(o,r,e)),this.pending=!0,this.delay=e,this.id=null!==(t=this.id)&&void 0!==t?t:this.requestAsyncId(o,this.id,e),this},t.prototype.requestAsyncId=function(n,e,t){return void 0===t&&(t=0),rn.setInterval(n.flush.bind(n,this),t)},t.prototype.recycleAsyncId=function(n,e,t){if(void 0===t&&(t=0),null!=t&&this.delay===t&&!1===this.pending)return e;null!=e&&rn.clearInterval(e)},t.prototype.execute=function(n,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var t=this._execute(n,e);if(t)return t;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(n,e){var t,r=!1;try{this.work(n)}catch(n){r=!0,t=n||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),t},t.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,t=this.scheduler,r=t.actions;this.work=this.state=this.scheduler=null,this.pending=!1,d(r,this),null!=e&&(this.id=this.recycleAsyncId(t,e,null)),this.delay=null,n.prototype.unsubscribe.call(this)}},t}(tn),un={now:function(){return(un.delegate||Date).now()},delegate:void 0},cn=function(){function n(e,t){void 0===t&&(t=n.now),this.schedulerActionCtor=e,this.now=t}return n.prototype.schedule=function(n,e,t){return void 0===e&&(e=0),new this.schedulerActionCtor(this,n).schedule(t,e)},n.now=un.now,n}(),an=new(function(n){function t(e,t){void 0===t&&(t=cn.now);var r=n.call(this,e,t)||this;return r.actions=[],r._active=!1,r}return e(t,n),t.prototype.flush=function(n){var e=this.actions;if(this._active)e.push(n);else{var t;this._active=!0;do{if(t=n.execute(n.state,n.delay))break}while(n=e.shift());if(this._active=!1,t){for(;n=e.shift();)n.unsubscribe();throw t}}},t}(cn))(on);function ln(n,e){return void 0===e&&(e=an),F((function(t,r){var o=null,i=null,u=null,c=function(){if(o){o.unsubscribe(),o=null;var n=i;i=null,r.next(n)}};function a(){var t=u+n,i=e.now();if(i<t)return o=this.schedule(void 0,t-i),void r.add(o);c()}t.subscribe(Y(r,(function(t){i=t,u=e.now(),o||(o=e.schedule(a,n),r.add(o))}),(function(){c(),r.complete()}),void 0,(function(){i=o=null})))}))}function sn(n,e){return F((function(t,r){var o=null,i=0,u=!1,c=function(){return u&&!o&&r.complete()};t.subscribe(Y(r,(function(t){null==o||o.unsubscribe();var u=0,a=i++;q(n(t,a)).subscribe(o=Y(r,(function(n){return r.next(e?e(t,n,a,u++):n)}),(function(){o=null,c()})))}),(function(){u=!0,c()})))}))}function fn(n,e){return void 0===e&&(e=0),F((function(t,r){t.subscribe(Y(r,(function(t){return J(r,n,(function(){return r.next(t)}),e)}),(function(){return J(r,n,(function(){return r.complete()}),e)}),(function(t){return J(r,n,(function(){return r.error(t)}),e)})))}))}function dn(n,e){return void 0===e&&(e=0),F((function(t,r){r.add(n.schedule((function(){return t.subscribe(r)}),e))}))}function pn(n,e){if(!n)throw new Error("Iterable cannot be null");return new O((function(t){J(t,e,(function(){var r=n[Symbol.asyncIterator]();J(t,e,(function(){r.next().then((function(n){n.done?t.complete():t.next(n.value)}))}),0,!0)}))}))}function hn(n,e){return e?function(n,e){if(null!=n){if(U(n))return function(n,e){return q(n).pipe(dn(e),fn(e))}(n,e);if(c(n))return function(n,e){return new O((function(t){var r=0;return e.schedule((function(){r===n.length?t.complete():(t.next(n[r++]),t.closed||this.schedule())}))}))}(n,e);if(l(n))return function(n,e){return q(n).pipe(dn(e),fn(e))}(n,e);if(z(n))return pn(n,e);if(K(n))return function(n,e){return new O((function(t){var r;return J(t,e,(function(){r=n[H](),J(t,e,(function(){var n,e,o;try{e=(n=r.next()).value,o=n.done}catch(n){return void t.error(n)}o?t.complete():t.next(e)}),0,!0)})),function(){return a(null==r?void 0:r.return)&&r.return()}}))}(n,e);if(D(n))return function(n,e){return pn(R(n),e)}(n,e)}throw M(n)}(n,e):q(n)}var vn=Array.isArray,bn=new O((function(n){return n.complete()}));function yn(n){return n[n.length-1]}function mn(n){return(e=yn(n))&&a(e.schedule)?n.pop():void 0;var e}function wn(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];var t=function(n){return a(yn(n))?n.pop():void 0}(n),r=function(n){return 1===n.length&&vn(n[0])?n[0]:n}(n);return r.length?new O((function(n){var e=r.map((function(){return[]})),u=r.map((function(){return!1}));n.add((function(){e=u=null}));for(var c=function(c){q(r[c]).subscribe(Y(n,(function(r){if(e[c].push(r),e.every((function(n){return n.length}))){var a=e.map((function(n){return n.shift()}));n.next(t?t.apply(void 0,i([],o(a))):a),e.some((function(n,e){return!n.length&&u[e]}))&&n.complete()}}),(function(){u[c]=!0,!e[c].length&&n.complete()})))},a=0;!n.closed&&a<r.length;a++)c(a);return function(){e=u=null}})):bn}function gn(n,e,t){var r=a(n)||e||t?{next:n,error:e,complete:t}:n;return r?F((function(n,e){var t;null===(t=r.subscribe)||void 0===t||t.call(r);var o=!0;n.subscribe(Y(e,(function(n){var t;null===(t=r.next)||void 0===t||t.call(r,n),e.next(n)}),(function(){var n;o=!1,null===(n=r.complete)||void 0===n||n.call(r),e.complete()}),(function(n){var t;o=!1,null===(t=r.error)||void 0===t||t.call(r,n),e.error(n)}),(function(){var n,e;o&&(null===(n=r.unsubscribe)||void 0===n||n.call(r)),null===(e=r.finalize)||void 0===e||e.call(r)})))})):C}function xn(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return hn(n,mn(n))}function En(n){return F((function(e,t){var r,o=null,i=!1;o=e.subscribe(Y(t,void 0,void 0,(function(u){r=q(n(u,En(n)(e))),o?(o.unsubscribe(),o=null,r.subscribe(t)):i=!0}))),i&&(o.unsubscribe(),o=null,r.subscribe(t))}))}function jn(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return(void 0===(t=1)&&(t=1/0),W(C,t))(hn(n,mn(n)));var t}var kn={URL:"http://localhost:3000/sudije",URLIME:"http://localhost:3000/sudije?ime=",URLPREZIME:"http://localhost:3000/sudije?prezime="},Sn=function(){return Sn=Object.assign||function(n){for(var e,t=1,r=arguments.length;t<r;t++)for(var o in e=arguments[t])Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n},Sn.apply(this,arguments)},_n=function(n,e,t,r){return new(t||(t=Promise))((function(o,i){function u(n){try{a(r.next(n))}catch(n){i(n)}}function c(n){try{a(r.throw(n))}catch(n){i(n)}}function a(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(u,c)}a((r=r.apply(n,e||[])).next())}))},Tn=function(n,e){var t,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(a){return function(c){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(u=0)),u;)try{if(t=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,r=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){u.label=c[1];break}if(6===c[0]&&u.label<o[1]){u.label=o[1],o=c;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(c);break}o[2]&&u.ops.pop(),u.trys.pop();continue}c=e.call(n,u)}catch(n){c=[6,n],r=0}finally{t=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,a])}}};function In(){return hn(fetch(kn.URL).then((function(n){if(!n.ok)throw new Error("Sudije nisu pronadjene!");return n.json()})).catch((function(n){return console.error(n),[]})))}function Pn(n){return _n(this,void 0,void 0,(function(){var e,t,r,o;return Tn(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,In().toPromise()];case 1:return e=i.sent(),(t=n.querySelector(".ukupanBrUtakmica"))||((t=document.createElement("div")).className="ukupanBrUtakmica",n.appendChild(t)),r=function(n){return n.map((function(n){return n.odsudjeneUtakmice})).reduce((function(n,e){return n+e}),0)}(e),t.innerHTML="Ukupan broj odsuđenih utakmica svih sudija našeg saveza: ".concat(r),An(e,"svi"),[3,3];case 2:return o=i.sent(),console.error(o),[3,3];case 3:return[2]}}))}))}function Ln(n){var e=n.statistika.oceneKlubova.reduce((function(n,e){return n+e}),0)/n.statistika.oceneKlubova.length;return Sn(Sn({},n),{statistika:Sn(Sn({},n.statistika),{prosecnaOcena:e})})}function An(n,e){var t=document.querySelector(".stranica");t.innerHTML="",n.map(Ln).filter((function(n){return"svi"===e||"glavni"===e&&"Glavni sudija"===n.kategorija||"pomocnici"===e&&"Pomocni sudija"===n.kategorija})).forEach((function(n){var e=document.createElement("div");e.className="karticaSudija";var r=n.id;[{label:"Ime",value:n.ime},{label:"Prezime",value:n.prezime},{label:"Kategorija",value:n.kategorija},{label:"Godina rođenja",value:n.godinaRodjenja},{label:"Ocene klubova",value:n.statistika.oceneKlubova},{label:"Prosečna ocena",value:n.statistika.prosecnaOcena}].forEach((function(n){var t=document.createElement("label");t.className=n.label.toLowerCase(),t.innerHTML="".concat(n.label,": ").concat(n.value),e.appendChild(t)}));var o=document.createElement("label");o.className="zakaziSudiju",o.innerHTML="Zakazi sudiju: ";var i=document.createElement("button");i.innerHTML="+";var u=document.createElement("label");u.className="dostupnost",u.innerHTML="Dostupnost: ".concat("🟩");var c=document.createElement("button");c.className="oceniSudiju",c.innerHTML="Oceni sudiju",c.disabled=!0;var a=c,l=document.createElement("div");l.className="karticaOceni",l.innerHTML="Utakmica: ",l.style.display="none";var s=document.createElement("input");s.className="tim1",l.appendChild(s),s.placeholder="Tim 1: ";var f=document.createElement("input");f.className="tim2",l.appendChild(f),f.placeholder="Tim 2: ";var d=document.createElement("input");d.className="ocenaSudije",l.appendChild(d),d.placeholder="Ocena sudije: (1-5)",[o,i,u,c,l].forEach((function(n){return e.appendChild(n)})),t.appendChild(e),function(n){var e=xn(n.odsudjeneUtakmice),t=xn.apply(void 0,n.statistika.oceneKlubova).pipe(function(n,e){return F(function(n,e,t,r,o){return function(r,o){var i=t,u=e,c=0;r.subscribe(Y(o,(function(e){var t=c++;u=i?n(u,e,t):(i=!0,e)}),(function(){i&&o.next(u),o.complete()})))}}(n,e,arguments.length>=2))}((function(n,e){return n[e]?n[e]++:n[e]=1,n}),[]));return wn(e,t).pipe(B((function(n){return{totalUtakmice:n[0],ocenePoKategoriji:n[1]}})))}(n).subscribe((function(n){var t=n.totalUtakmice,r=n.ocenePoKategoriji,o=document.createElement("div");o.style.maxWidth="600px",o.style.margin="0 auto";for(var i=1;i<=5;i++){var u=document.createElement("div");u.className="linija";var c=r[i]/t*100;u.innerHTML='<div class="popunjena" style="height: '.concat(c,'%;"></div>'),o.appendChild(u)}e.appendChild(o)})),c.addEventListener("click",(function(){wn(nn(s,"input").pipe(ln(1e3),B((function(n){return n.target.value}))),nn(f,"input").pipe(ln(1e3),B((function(n){return n.target.value}))),nn(d,"input").pipe(ln(500),B((function(n){var e=n.target.value.trim(),t=parseInt(e,10);return t<1&&(e="1"),t>5&&(e="5"),e})))).subscribe((function(n){!function(n,e,t,r){hn(fetch("".concat(kn.URL,"/").concat(r))).pipe(sn((function(n){return n.json()})),B((function(o){if(o){var i=parseInt(t);o.statistika.oceneKlubova.push(i);var u={tim1:n,tim2:e,ocenaSudije:i};o&&Array.isArray(o.utakmice)&&o.utakmice.push(u);var c=o.statistika.oceneKlubova.reduce((function(n,e){return n+e}),0)/o.statistika.oceneKlubova.length;return o.statistika.prosecnaOcena=c,o.odsudjeneUtakmice=o.statistika.oceneKlubova.length,hn(fetch("".concat(kn.URL,"/").concat(r),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)}))}throw new Error("Sudija nije pronadjen.")})),En((function(n){return console.error("greska kod dodavanja ocene sudiji:",n),[]}))).subscribe((function(n){var e;e=document.querySelector(".iznadKartica"),console.log(e),e?In().subscribe((function(n){An(n,"svi"),Pn(e)})):console.error("Container nije pronadjen."),console.log("ccena uspesno dodata sudiji.")}))}(n[0],n[1],n[2],r)}))})),nn(c,"click").pipe(gn((function(){"none"===l.style.display?l.style.display="block":l.style.display="none"}))).subscribe(),nn(i,"click").pipe((1,F((function(n,e){var t=0;n.subscribe(Y(e,(function(n){++t<=1&&(e.next(n),1<=t&&e.complete())})))}))),gn((function(){console.log("Sudija ".concat(n.ime," ").concat(n.prezime," sudi utakmicu!")),u.innerHTML="Dostupnost: 🟥",setTimeout((function(){a.disabled=!1}),3e3)}))).subscribe()}))}!function(){var n=document.createElement("div");n.className="header";var e=document.createElement("label");e.innerHTML="Fudbalske sudije grada Niša",n.appendChild(e),document.body.appendChild(n)}(),function(){var n=document.createElement("div");n.className="main";var e=document.createElement("div");e.className="iznadKartica",n.appendChild(e),Pn(e);var t=document.createElement("div");t.className="radioKontejner",[{label:"Sve sudije",value:"svi",checked:!0},{label:"Glavne sudije",value:"glavni"},{label:"Pomoćne sudije",value:"pomocnici"}].forEach((function(n){var e=document.createElement("input");e.type="radio",e.name="filter",e.value=n.value,e.checked=n.checked;var r=document.createElement("label");r.className=n.value,r.innerHTML=n.label,t.appendChild(e),t.appendChild(r)})),n.appendChild(t);var r=document.createElement("label");r.className="pretragaLabel",r.innerHTML="Pretraži po imenu/prezimenu: ",t.appendChild(r);var o=document.createElement("input");o.className="pretragaImePrezime",t.appendChild(o),function(n){nn(n,"input").pipe(ln(500),B((function(n){return n.target.value})),function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];var t=mn(n);return F((function(e,r){(t?jn(n,e,t):jn(n,e)).subscribe(r)}))}(""),sn((function(n){var e=n.split(" ")[0],t=n.split(" ")[1];if(!e&&!t)return console.log(In()),In();var r=function(n){return hn(fetch(kn.URLIME+n).then((function(n){if(n.ok)return n.json();throw new Error("Sudija nije pronadjen!")})).then((function(n){return n})).catch((function(n){return console.error(n),[]})))}(e);return r.pipe(sn((function(n){return n.length>0?xn(n):function(n){return hn(fetch(kn.URLPREZIME+n).then((function(n){if(n.ok)return n.json();throw new Error("Sudija nije pronadjen!")})).then((function(n){return n})).catch((function(n){return console.error(n),[]})))}(e)})),En((function(n){return console.error(n),xn([])})))}))).subscribe((function(n){console.log(n),An(n,"svi")}))}(o);var i=document.createElement("div");i.className="stranica",n.appendChild(i),document.body.appendChild(n),nn(document.querySelectorAll('input[type="radio"]'),"change").pipe(ln(100),B((function(n){return n.target.value})),sn((function(n){return In().pipe(B((function(e){return An(e,n)})))}))).subscribe()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,